#:import threading threading
#:import win kivy.core.window

WindowManager:
    MainWindow:
    PlayChessWindow:
    WatchChessWindow:
    DemoWindow:
    PhotoWindow:
    ShutDown:
	
	
<MainWindow>:
    name: "main"
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
        
        ImageButton:  
            source:'GUIPics/PlayChess.png'
            size_hint: 0.15, 0.15  
            pos_hint: {"x": 0.25, 'y':0.55}
            on_release:
                app.root.current = "playchess"
                root.manager.transition.direction = "left"
        ImageButton:  
            source:'GUIPics/Power.png' 
            size_hint: 0.15, 0.15 
            pos_hint: {"x": 0.58, 'y':0.55}
            on_release:
				app.root.current = "shutdown"
                root.manager.transition.direction = "left"           
        ImageButton:  
            source:'GUIPics/WatchChess.png'  
            pos_hint: {"x": 0.58, 'y':0.25}
            size_hint: 0.15, 0.15
            on_release:
                app.root.current = "watchchess"
                root.manager.transition.direction = "left"
        ImageButton:  
            source:'GUIPics/DemoMode.png'  
            pos_hint: {"x": 0.25, 'y':0.25}
            size_hint: 0.15, 0.15
            on_release:
                app.root.current = "demoscreen"
                root.manager.transition.direction = "left"
				
				
<PlayChessWindow>:
    name: "playchess"
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
				
        Label:
            font_size: 20
			size_hint: 0.5, 0.10
            pos_hint: {"x": 0.18, 'y':0.8805}
            text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Play a Chess Game'
        ImageButton:
            source:'GUIPics/BackArrow.png'
            pos_hint: {"x": 0.90, 'y':0.87}
            size_hint: 0.10, 0.10
            on_release:
                app.root.current = "main"
                root.manager.transition.direction = "right"
        Label:
            height: 24
			size_hint: 0.8, 0.6
            pos_hint: {"x": 0.05, 'y':0.38}
            font_size: 40
			text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Sorry, this feature is not available at this time...'
			
				
				
<WatchChessWindow>:
    name: "watchchess"
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
				
        Label:
            font_size: 20
			size_hint: 0.5, 0.10
            pos_hint: {"x": 0.18, 'y':0.8805}
            text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Watch a Chess Game'
        Label:
            id: facts_label
            font_size: 24
			size_hint: 0.4, 0.9
            pos_hint: {"x": 0.4, 'y':0.3}
            text_size: self.size
            color: (1, 1, 1, .8)
            text: root.facts
        ImageButton:
            source:'GUIPics/BackArrow.png'
            pos_hint: {"x": 0.90, 'y':0.87}
            size_hint: 0.10, 0.10
            on_release:
                app.root.current = "main"
                root.manager.transition.direction = "right"
        ImageButton:
            source: 'GUIPics/StartChessGame.png'
			size_hint:(.2, .20)
            pos_hint:{'x':.05, 'y':.40}
            on_release:
                root.ids.facts_label.text = root.start_game()
                startButton.visible = False
		ImageButton:
            source: 'GUIPics/Stopbutton.png'
			size_hint:(.2, .20)
            pos_hint:{'x':.05, 'y':.55}
            on_release:
                root.stop_game()
                # app.root.current = "main"
                # root.manager.transition.direction = "left"
                # startButton.visible = True
        ImageButton:
			source: 'GUIPics/ResetBoardPieces.png'
			size_hint:(.2, .20)
			pos_hint:{'x':.05, 'y':.25}
            on_release:
                root.reset_game()
                # app.root.current = "main"
                # root.manager.transition.direction = "left"
                # startButton.visible = True
				
				
<DemoWindow>:
    name: "demoscreen"
    on_start:
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
				
        Label:
            font_size: 20
			size_hint: 0.5, 0.10
            pos_hint: {"x": 0.18, 'y':0.8805}
            text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Diagrams and Code Examples'
        ImageButton:
            source:'GUIPics/BackArrow.png'
            pos_hint: {"x": 0.90, 'y':0.87}
            size_hint: 0.10, 0.10
            on_release:
                app.root.current = "main"
                root.manager.transition.direction = "right"
				
		Label:
            height: 24
			size_hint: 0.23, 0.30
            pos_hint: {"x": 0.025, 'y':0.56}
            font_size: 20
			text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'View charts and diagrams that were involved in designing this project! First select a file and then you can zoom into the image using two fingers.'
			
		ScrollView:
			do_scroll_x: False
			do_scroll_y: True
			size_hint: (0.7, 0.65)
			pos_hint: {'x':.25, 'y':.15}
			GridLayout:
				cols: 1
				padding: 0
				spacing: 10
				size_hint: (None, None)
				size_hint_y:  None
				width: 1000
				height: self.minimum_height
				Label:
					text:""
					font_size: 15
					size: (900, 80)
				Button:
                    font_size: 0.75 * self.height
					text: "Chess System Assembly"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Chess System Assembly')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.70 * self.height
					text: "Chess System Assembly Exploded"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Chess System Assembly Exploded')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Acrylic Display"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Acrylic Display')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Cabinet Assembly Exploded"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Cabinet Assembly Exploded')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Acrylic Top"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Acrylic Top')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Acrylic Locking Sides"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Acrylic Locking Sides')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Acrylic Ends"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Acrylic Ends')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Cabinet Top"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Cabinet Top')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Cabinet Bottom"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Cabinet Bottom')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Cabinet Side Board (Long)"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Long Cabinet Side Board')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Cabinet Side Board (Short)"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Short Cabinet Side Board')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Chessboard Design"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Chessboard Design')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Gripper Attachment"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Gripper Attachment')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"
				Button:
                    font_size: 0.75 * self.height
					text: "Riser"
					size: (900, 80)
					size_hint: (None, None)
					on_release:
						root.ChangeImage('Riser')
						app.root.current = "photowindow"
						root.manager.transition.direction = "left"


<PhotoWindow>:
	name: "photowindow"
	on_start:
	FloatLayout:
		canvas.before:
			Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
				
		Label:
            font_size: 20
			size_hint: 0.5, 0.10
            pos_hint: {"x": 0.18, 'y':0.8805}
            text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Image Viewer'
        ImageButton:
            source:'GUIPics/BackArrow.png'
            pos_hint: {"x": 0.90, 'y':0.87}
            size_hint: 0.10, 0.10
            on_release:
				root.remove_image()
                app.root.current = "demoscreen"
                root.manager.transition.direction = "right"
				
			
<Picture>:
    # each time a picture is created, the image can delay the loading
    # as soon as the image is loaded, ensure that the center is changed
    # to the center of the screen.
    on_size: self.center = win.Window.center
    size: image.size
    size_hint: None, None
	#pos_hint:{'x': .1, 'y': .025}

    Image:
        id: image
        source: root.source

        # create initial image to be 400 pixels width
        size: 1050, 1050 / self.image_ratio

        # add shadow background
        canvas.before:
            Color:
                rgba: 1,1,1,1

				
<ShutDown>:
    name: "shutdown"
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'GUIPics/background.png'
				
        Label:
            font_size: 20
			size_hint: 0.5, 0.10
            pos_hint: {"x": 0.18, 'y':0.8805}
            text_size: self.width, None
            color: (1, 1, 1, .8)
            text: 'Shutdown'
        ImageButton:
            source:'GUIPics/BackArrow.png'
            pos_hint: {"x": 0.90, 'y':0.87}
            size_hint: 0.10, 0.10
            on_release:
                app.root.current = "main"
                root.manager.transition.direction = "right"
				
		ImageButton:
            source:'GUIPics/No.png'
			size_hint:(.35, .20)
            pos_hint:{'x':.10, 'y':.40}
			on_release:
                root.activate_admin_mode()
                app.root.current = "main"
                root.manager.transition.direction = "right"
		ImageButton:
            source:'GUIPics/YesSafely.png'
			size_hint:(.35, .20)
            pos_hint:{'x':.55, 'y':.40}
			on_release:
                root.turn_off()
                quit()
        ImageButton:
            source:'GUIPics/ForceRestart.png'
			size_hint:(.35, .20)
            pos_hint:{'x':.10, 'y':.15}
			on_release:
                root.reset_pi()
                quit()
		ImageButton:
            source:'GUIPics/ForceShutdown.png'
			size_hint:(.35, .20)
            pos_hint:{'x':.55, 'y':.15}
			on_release:
                root.force_off()
                quit()
		Label:
            font_size: 20
			size_hint: 0.95, 0.30
            pos_hint: {"x": 0.025, 'y':0.55}
            text_size: self.width, None
			halign: 'center'
            color: (1, 1, 1, .8)
            text: 'Are you sure you would like to shutdown?\n"Yes (Safely)" ensures the robot stops moving and it in the proper position to reset. This may take up to a minute to turn off.\n"Force Restart" and "Force Shutdown" immediately powers off the system (which can damage the robots if they are still moving).'
